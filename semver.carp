(deftype Semver [major Int, minor Int, patch Int, tag String])

(defmodule Semver
  (defn from-string [s]
    (if (not (Pattern.matches? #"^\d+\.\d+\.\d+.*" s))
      (Maybe.Nothing)
      (let [split (String.split-by s &[\.])
            major (Int.from-string (Array.nth &split 0))
            minor (Int.from-string (Array.nth &split 1))
            trail (String.join @"." &(Array.suffix-array &split 2))
            idx (Pattern.find #"[^0-9]" &trail)
            patch-str (if (> idx -1) (String.prefix-string &trail idx) @&trail)
            patch (Int.from-string &patch-str)
            tag (if (> idx -1) (String.suffix-string &trail idx) @"")]
          (Maybe.Just (Semver.init major minor patch tag)))))

  (defn zero []
    (Semver.init 0 0 0 @""))

  (defn str [s]
    (fmt "Semver(%d.%d.%d%s)" @(major s) @(minor s) @(patch s) (tag s)))

  (defn = [a b]
    (and*
      (= (major a) (major b))
      (= (minor a) (minor b))
      (= (patch a) (patch b))
      (= (tag a) (tag b))))

  (defn /= [a b] (not (Semver.= a b)))

  (defn < [a b]
    (or (< (major a) (major b))
      (or (< (minor a) (minor b))
          (< (patch a) (patch b)))))

  (defn > [a b]
    (or (> (major a) (major b))
      (or (> (minor a) (minor b))
          (> (patch a) (patch b)))))
)

(defmodule SemverCopy
  (defn = [a b]
    (and*
      (= (Semver.major &a) (Semver.major &b))
      (= (Semver.minor &a) (Semver.minor &b))
      (= (Semver.patch &a) (Semver.patch &b))
      (= (Semver.tag &a) (Semver.tag &b))))

  (defn /= [a b] (not (SemverCopy.= a b)))

  (defn < [a b]
    (or (< (Semver.major &a) (Semver.major &b))
      (or (< (Semver.minor &a) (Semver.minor &b))
          (< (Semver.patch &a) (Semver.patch &b)))))

  (defn > [a b]
    (or (> (Semver.major &a) (Semver.major &b))
      (or (> (Semver.minor &a) (Semver.minor &b))
          (> (Semver.patch &a) (Semver.patch &b)))))
)
