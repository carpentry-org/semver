(deftype Semver [major Int, minor Int, patch Int, tag String])

(defmodule Semver
  (defn from-string [s]
    (if (> (String.count-char s \.) 1)
      (let [split (String.split-by s &[\.])
            major (Int.from-string (Array.nth &split 0))
            minor (Int.from-string (Array.nth &split 1))
            trail (String.join "." &(Array.suffix-array &split 2))
            idx (Pattern.find #"[^0-9]" &trail)
            patch-str (if (> idx -1) (String.prefix-string &trail idx) @&trail)
            patch (Int.from-string &patch-str)
            tag (if (> idx -1) (String.suffix-string &trail idx) @"")]
          (Maybe.Just (Semver.init major minor patch tag)))
      (Maybe.Nothing)))

  (defn zero [] (Semver.init 0 0 0 @""))

  (defn = [a b]
    (and*
      (= (major a) (major b))
      (= (minor a) (minor b))
      (= (patch a) (patch b))
      (= (tag a) (tag b))))

  (defn < [a b]
    (if (< (major a) (major b))
      true
      (if (< (minor a) (minor b))
        true
        (< (patch a) (patch b)))))

  (defn > [a b]
    (if (> (major a) (major b))
      true
      (if (> (minor a) (minor b))
        true
        (> (patch a) (patch b)))))
)

(defmodule SemverCopy
  (defn = [a b]
    (and*
      (= (Semver.major &a) (Semver.major &b))
      (= (Semver.minor &a) (Semver.minor &b))
      (= (Semver.patch &a) (Semver.patch &b))
      (= (Semver.tag &a) (Semver.tag &b))))
)
